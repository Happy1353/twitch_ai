"""
Main application - Twitch AI Girl Streamer (VRM Edition)
"""
import asyncio
import time
import threading
from datetime import datetime
import config
from utils.mok_chat import start_mok_bot
from twitch_chat import start_chat_bot
from ai_brain import AIBrain
from voice_engine import VoiceEngine
from avatar_animator import AvatarAnimator
from web_server import start_server
import sys
from utils.message_filter import MessageFilter
from data.db import AppDb

class TwitchAIGirl:
    """Main application class"""
    
    def __init__(self, mode):
        """Initialize application"""
        print("=" * 60)
        print(f"üéÄ Twitch AI Girl - {config.CHARACTER_NAME}")
        print("=" * 60)
        # Mode 
        self.mode = mode

        # Initialize components
        self.ai_brain = AIBrain()
        self.voice_engine = VoiceEngine()
        self.avatar = AvatarAnimator()
        self.chat_bot = None
        
        # State
        self.last_response_time = 0
        self.is_processing = False
        self.message_queue = asyncio.Queue()
        
        # Filter 
        self.message_filter = MessageFilter()

    async def process_message(self, username: str, message: str):
        """
        Process incoming chat message
        
        Args:
            username: Username who sent the message
            message: Message content
        """
        # Check cooldown
        current_time = time.time()
        if self.mode != 'no_bot' and current_time - self.last_response_time < config.MESSAGE_COOLDOWN:
            print(f"‚è≥ Cooldown active, skipping message from {username}")
            return
        
        # Check if already processing
        if self.is_processing:
            print(f"‚è≥ –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é: {username}")
            return
        
        if self.message_filter.should_ignore_message(username, message):
            print(f"–ü–ª–æ—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µÔºå–ø—Ä–æ–ø—É—Å–∫–∞—é: {username}")
            return

        self.is_processing = True
        
        try:
            # Get AI response
            print(f"\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username}...")
            response = await self.ai_brain.get_response(username, message)
            
            if not response:
                return
            
            print(f"üí≠ –û—Ç–≤–µ—Ç: {response}")
            
            # Generate audio file
            audio_file = await self.voice_engine.text_to_speech(response)
            
            if not audio_file:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
                return
            
            # Get audio duration
            duration = await self.voice_engine.get_audio_duration(audio_file)
            
            # Start talking animation
            await self.avatar.start_talking()
            
            # Send audio to browser for playback
            await self.avatar.vrm_controller.play_audio(audio_file)
            
            # Wait for audio to finish
            await asyncio.sleep(duration)
            
            # Stop talking animation
            await self.avatar.stop_talking()
            
            # Clean up audio file
            import os
            try:
                os.remove(audio_file)
            except:
                pass
            
            print(f"‚úì –û—Ç–≤–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω ({duration:.1f}s)\n")
            
            self.last_response_time = time.time()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self.avatar.stop_talking()
        finally:
            self.is_processing = False
    
    async def start(self):
        """Start the application"""
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n")
        
        # Validate configuration
        if not self._validate_config():
            return
        
        # Start HTTP server for VRM viewer (in separate thread)
        print("üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
        http_thread = threading.Thread(target=start_server, daemon=True)
        http_thread.start()
        
        # Give HTTP server time to start
        await asyncio.sleep(1)
        
        # Start avatar (WebSocket server + browser)
        print("üé® –ó–∞–ø—É—Å–∫ VRM –∞–≤–∞—Ç–∞—Ä–∞...")
        avatar_task = asyncio.create_task(self.avatar.start())
        
        # Give browser time to open
        await asyncio.sleep(3)
        # Start chat bot
        if self.mode == 'no_bot':
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ñ–∞–π–ª—É...")
            self.chat_bot = await start_mok_bot(self.process_message)
        else:
            print("üí¨ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Twitch —á–∞—Ç—É...")
            self.chat_bot = await start_chat_bot(self.process_message)
        
        print("\n" + "=" * 60)
        print("‚ú® –í–°–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ü–£–©–ï–ù–´! ‚ú®")
        print("=" * 60)
        print(f"–ö–∞–Ω–∞–ª: {config.TWITCH_CHANNEL}")
        print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂: {config.CHARACTER_NAME}")
        print("=" * 60)
        print("\n–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ...")
        print("–ó–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        
        # Run bot
        try:
            await self.chat_bot.start()
        except KeyboardInterrupt:
            print("\n\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            await self.cleanup()
    
    def _validate_config(self) -> bool:
        """Validate configuration"""
        errors = []
        
        if not config.TWITCH_TOKEN:
            errors.append("TWITCH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not config.TWITCH_CHANNEL:
            errors.append("TWITCH_CHANNEL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        if not config.OPENAI_API_KEY:
            errors.append("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Groq –∫–ª—é—á)")
        
        if errors:
            print("‚ùå –û–®–ò–ë–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
            for error in errors:
                print(f"  - {error}")
            print("\n‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π–ª .env")
            print("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            print("üìñ –°–º. SETUP_GROQ.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
            return False
        
        return True
    
    async def cleanup(self):
        """Cleanup resources"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.voice_engine:
            self.voice_engine.stop()
        
        if self.avatar:
            await self.avatar.stop()
        
        print("‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ")


async def main(mode):
    """Main entry point"""
    app = TwitchAIGirl(mode)
    await app.start()


if __name__ == "__main__":
    try:
        mode = sys.argv[2] if len(sys.argv) > 2 else 'full'
        asyncio.run(main(mode))
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
