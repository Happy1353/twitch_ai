"""
Utility script to test setup and configuration
"""
import os
import sys
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

import config


def test_configuration():
    """Test if configuration is properly set up"""
    print("=" * 60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 60)
    
    errors = []
    warnings = []
    
    # Check Twitch configuration
    print("\nüì∫ Twitch Configuration:")
    if config.TWITCH_TOKEN:
        print(f"  ‚úì TWITCH_TOKEN: {'*' * 20}{config.TWITCH_TOKEN[-10:]}")
    else:
        errors.append("TWITCH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  ‚ùå TWITCH_TOKEN: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if config.TWITCH_CLIENT_ID:
        print(f"  ‚úì TWITCH_CLIENT_ID: {config.TWITCH_CLIENT_ID[:10]}...")
    else:
        errors.append("TWITCH_CLIENT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  ‚ùå TWITCH_CLIENT_ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if config.TWITCH_CHANNEL:
        print(f"  ‚úì TWITCH_CHANNEL: {config.TWITCH_CHANNEL}")
    else:
        errors.append("TWITCH_CHANNEL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  ‚ùå TWITCH_CHANNEL: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    if config.TWITCH_BOT_NAME:
        print(f"  ‚úì TWITCH_BOT_NAME: {config.TWITCH_BOT_NAME}")
    else:
        warnings.append("TWITCH_BOT_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞)")
        print("  ‚ö† TWITCH_BOT_NAME: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # Check OpenAI configuration
    print("\nü§ñ OpenAI Configuration:")
    if config.OPENAI_API_KEY:
        print(f"  ‚úì OPENAI_API_KEY: sk-...{config.OPENAI_API_KEY[-10:]}")
    else:
        errors.append("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  ‚ùå OPENAI_API_KEY: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # Check character configuration
    print("\nüëß Character Configuration:")
    print(f"  ‚úì CHARACTER_NAME: {config.CHARACTER_NAME}")
    print(f"  ‚úì VOICE_MODEL: {config.VOICE_MODEL}")
    print(f"  ‚úì PERSONALITY: {config.CHARACTER_PERSONALITY[:50]}...")
    
    # Check directories
    print("\nüìÅ Directories:")
    assets_dir = Path("assets")
    if assets_dir.exists():
        print(f"  ‚úì assets/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"  ‚ö† assets/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    
    output_dir = Path(config.AUDIO_OUTPUT_DIR)
    if output_dir.exists():
        print(f"  ‚úì {config.AUDIO_OUTPUT_DIR}/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"  ‚ö† {config.AUDIO_OUTPUT_DIR}/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    
    # Check avatar images
    print("\nüé® Avatar Images:")
    idle_path = Path(config.AVATAR_IMAGE_PATH)
    if idle_path.exists():
        print(f"  ‚úì {config.AVATAR_IMAGE_PATH} –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"  ‚ö† {config.AVATAR_IMAGE_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω placeholder)")
    
    talking_path = Path(config.AVATAR_MOUTH_OPEN_PATH)
    if talking_path.exists():
        print(f"  ‚úì {config.AVATAR_MOUTH_OPEN_PATH} –Ω–∞–π–¥–µ–Ω")
    else:
        print(f"  ‚ö† {config.AVATAR_MOUTH_OPEN_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω placeholder)")
    
    # Test imports
    print("\nüì¶ Dependencies:")
    try:
        import twitchio
        print(f"  ‚úì twitchio v{twitchio.__version__}")
    except ImportError:
        errors.append("twitchio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  ‚ùå twitchio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import openai
        print(f"  ‚úì openai v{openai.__version__}")
    except ImportError:
        errors.append("openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  ‚ùå openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import pygame
        print(f"  ‚úì pygame v{pygame.version.ver}")
    except ImportError:
        errors.append("pygame –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  ‚ùå pygame –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import cv2
        print(f"  ‚úì opencv-python v{cv2.__version__}")
    except ImportError:
        errors.append("opencv-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  ‚ùå opencv-python –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # Summary
    print("\n" + "=" * 60)
    if errors:
        print("‚ùå –ù–ê–ô–î–ï–ù–´ –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"  ‚Ä¢ {error}")
        print("\n‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        print("üìñ –°–º. setup_guide.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
        return False
    elif warnings:
        print("‚ö† –ù–ê–ô–î–ï–ù–´ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"  ‚Ä¢ {warning}")
        print("\n‚úì –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        return True
    else:
        print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É: python main.py")
        return True


if __name__ == "__main__":
    success = test_configuration()
    sys.exit(0 if success else 1)

